// // I'm now recommending this technique:

// @mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {
// 	& {
// 		@each $property in $properties {
// 			#{$property}: $min-value;
// 		}

// 		@media screen and (min-width: $min-screen) {
// 			@each $property in $properties {
// 				#{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value); 
// 			}
// 		}

// 		@media screen and (min-width: $max-screen) {
// 			@each $property in $properties {
// 				#{$property}: $max-value;
// 			}
// 		}
// 	}
// }

// // Requires the calc-interpolation function which can also be used independently

// @function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {
// 	$a: ($max-value - $min-value) / ($max-screen - $min-screen);
// 	$b: $min-value - $a * $min-screen; 

// 	$sign: "+";
// 	@if ($b < 0) {
// 		$sign: "-";
// 		$b: abs($b);
// 	}
// 	@return calc(#{$a*100}vw #{$sign} #{$b});
// }

// // Indrek Pass also has a fantastic mixin here: http://sassmeister.com/gist/7f22e44ace49b5124eec

// ----
// Sass (vundefined)
// Compass (vundefined)
// dart-sass (v1.6.2)
// ----

// =============================================================================
//
//  PRECISE CONTROL OVER RESPONSIVE TYPOGRAPHY FOR SASS
//  ---------------------------------------------------
//  Indrek Paas @indrekpaas
//
//  Inspired by Mike Riethmuller's Precise control over responsive typography
//  https://www.madebymike.com.au/writing/precise-control-responsive-typography/
//
//  Borrowed `strip-unit` function from Hugo Giraudel
//  https://css-tricks.com/snippets/sass/strip-unit-function/
//
//  02.04.2018 Remove `screen` keyword from media queries
//  11.08.2016 Remove redundant `&` self-reference
//  31.03.2016 Remove redundant parenthesis from output
//  02.10.2015 Add support for multiple properties
//  24.04.2015 Initial release
//
// =============================================================================
@mixin fluidSize($properties, $min-vw, $max-vw, $min-value, $max-value) {
    @each $property in $properties {
        #{$property}: $min-value;
    }

    @media (min-width: $min-vw) {
        @each $property in $properties {
            #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
        }
    }

    @media (min-width: $max-vw) {
        @each $property in $properties {
            #{$property}: $max-value;
        }
    }
}

@function strip-unit($number) {
    @if type-of($number) == "number" and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }

    @return $number;
}

// $baseline: $global-lineheight;

/* Single property */
// html {
//     // @include fluid-type(font-size, 320px, $cog-bp--desktop-xl, 14px, 20px);
//     @include fluid-type(line-height, 20rem, 70rem, 1.2rem, 1.5rem);
// }
// 
// /* Multiple properties with same values */
// h1 {
//     // @include fluid-type((padding-top, padding-bottom), 20rem, 70rem, 0rem, .5rem);
//     // // @include fluid-type(font-size, 320px, $cog-bp--desktop-xl, 48px, 84px);
//     // @include fluid-type(line-height, 20rem, 70rem, 2rem, 2.5rem);
// }

// ===================================================================================
// LINE HEIGHT CROP
// ===================================================================================
@mixin lhCrop($line-height, $capital-letter: 1) {
    &::before {
        display   : block;

        width     : 0;
        height    : 0;
        margin-top: calc((#{$capital-letter} - #{$line-height}) * 0.5em);

        content   : '';
    }
}
